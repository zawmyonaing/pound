From 901d2188d86dcaf026c0bd0a996b33aee21b363d Mon Sep 17 00:00:00 2001
From: Joe Gooch <mrwizard@k12system.com>
Date: Mon, 19 Mar 2012 10:58:34 -0400
Subject: ThreadModel implementation

Implement a config option for pool (2.6 behavior) vs dynamic (2.5 behavior)
---
 config.c |    7 ++++++-
 http.c   |    9 +++++++++
 pound.8  |   13 +++++++++++++
 pound.c  |   60 +++++++++++++++++++++++++++++++++++++++++-------------------
 pound.h  |    2 ++
 5 files changed, 71 insertions(+), 20 deletions(-)

--- a/config.c
+++ b/config.c
@@ -75,9 +75,10 @@
 static regex_t  ListenHTTP, ListenHTTPS, End, Address, Port, Cert, xHTTP, Client, CheckURL;
 static regex_t  Err414, Err500, Err501, Err503, MaxRequest, HeadRemove, RewriteLocation, RewriteDestination;
 static regex_t  Service, ServiceName, URL, HeadRequire, HeadDeny, BackEnd, Emergency, Priority, HAport, HAportAddr;
+
 static regex_t  Redirect, RedirectN, TimeOut, Session, Type, TTL, ID, DynScale;
 static regex_t  ClientCert, AddHeader, SSLAllowClientRenegotiation, SSLHonorCipherOrder, Ciphers, CAlist, VerifyList, CRLlist, NoHTTPS11;
-static regex_t  Grace, Include, ConnTO, IgnoreCase, HTTPS, HTTPSCert, Disabled, Threads, CNName;
+static regex_t  Grace, Include, ConnTO, IgnoreCase, HTTPS, HTTPSCert, Disabled, Threads, ThreadModel, CNName;
 
 static regmatch_t   matches[5];
 
@@ -1186,6 +1187,8 @@
             daemonize = atoi(lin + matches[1].rm_so);
         } else if(!regexec(&Threads, lin, 4, matches, 0)) {
             numthreads = atoi(lin + matches[1].rm_so);
+        } else if(!regexec(&ThreadModel, lin, 4, matches, 0)) {
+            threadpool = ((lin[matches[1].rm_so]|0x20) == 'p'); /* 'pool' */
         } else if(!regexec(&LogFacility, lin, 4, matches, 0)) {
             lin[matches[1].rm_eo] = '\0';
             if(lin[matches[1].rm_so] == '-')
@@ -1293,6 +1296,7 @@
     || regcomp(&RootJail, "^[ \t]*RootJail[ \t]+\"(.+)\"[ \t]*$", REG_ICASE | REG_NEWLINE | REG_EXTENDED)
     || regcomp(&Daemon, "^[ \t]*Daemon[ \t]+([01])[ \t]*$", REG_ICASE | REG_NEWLINE | REG_EXTENDED)
     || regcomp(&Threads, "^[ \t]*Threads[ \t]+([1-9][0-9]*)[ \t]*$", REG_ICASE | REG_NEWLINE | REG_EXTENDED)
+    || regcomp(&ThreadModel, "^[ \t]*ThreadModel[ \t]+(pool|dynamic)[ \t]*$", REG_ICASE | REG_NEWLINE | REG_EXTENDED)
     || regcomp(&LogFacility, "^[ \t]*LogFacility[ \t]+([a-z0-9-]+)[ \t]*$", REG_ICASE | REG_NEWLINE | REG_EXTENDED)
     || regcomp(&LogLevel, "^[ \t]*LogLevel[ \t]+([0-5])[ \t]*$", REG_ICASE | REG_NEWLINE | REG_EXTENDED)
     || regcomp(&Grace, "^[ \t]*Grace[ \t]+([0-9]+)[ \t]*$", REG_ICASE | REG_NEWLINE | REG_EXTENDED)
@@ -1427,6 +1431,7 @@
     ctrl_name = NULL;
 
     numthreads = 128;
+    threadpool = 0;
     alive_to = 30;
     daemonize = 1;
     grace = 30;
@@ -1453,6 +1458,7 @@
     regfree(&RootJail);
     regfree(&Daemon);
     regfree(&Threads);
+    regfree(&ThreadModel);
     regfree(&LogFacility);
     regfree(&LogLevel);
     regfree(&Grace);
--- a/http.c
+++ b/http.c
@@ -1593,6 +1593,15 @@
 {
     thr_arg *arg;
 
+    if (dummy!=NULL) {
+        arg = (thr_arg *)dummy;
+        if (arg == NULL) {
+            logmsg(LOG_WARNING, "NULL get_thr_arg");
+            return;
+        }
+        do_http(arg);
+        return;
+    }
     for(;;) {
         while((arg = get_thr_arg()) == NULL)
             logmsg(LOG_WARNING, "NULL get_thr_arg");
--- a/pound.8
+++ b/pound.8
@@ -222,6 +222,19 @@
 to work like a regular process. Useful for debugging or if you want to
 use something like \fIdaemontools\fR.
 .TP
+\fBThreadModel\fR [pool|dynamic]
+If set to pool, 
+.B Pound
+will spawn 
+\fBThreads\fR
+number of threads when it starts and reuse those threads throughout its
+lifetime.  This sets a hard limit on the number of concurrent requests
+that can be processed.
+If set to dynamic, a new thread is spawned for each and every request.
+This means you have a penalty for thread creation on every request, and
+possibility of DoS if too many requests come in, but it also means your
+thread count will scale up and down as necessary.
+.TP
 \fBThreads\fR nnn
 How many worker threads
 .B Pound
--- a/pound.c
+++ b/pound.c
@@ -110,7 +110,7 @@
 static thr_arg          *first = NULL, *last = NULL;
 static pthread_cond_t   arg_cond;
 static pthread_mutex_t  arg_mut;
-int                     numthreads;
+int                     numthreads, threadpool;
 
 static void
 init_thr_arg(void)
@@ -120,20 +120,29 @@
     return;
 }
 
-/*
- * add a request to the queue
- */
-int
-put_thr_arg(thr_arg *arg)
+thr_arg *
+get_dyn_thr_arg(thr_arg *arg)
 {
     thr_arg *res;
 
     if((res = malloc(sizeof(thr_arg))) == NULL) {
         logmsg(LOG_WARNING, "thr_arg malloc");
-        return -1;
+        return NULL;
     }
     memcpy(res, arg, sizeof(thr_arg));
     res->next = NULL;
+    return res;
+}
+
+/*
+ * add a request to the queue
+ */
+int
+put_thr_arg(thr_arg *arg)
+{
+    thr_arg *res;
+    if ((res = get_dyn_thr_arg(arg))==NULL)
+        return -1;
     (void)pthread_mutex_lock(&arg_mut);
     if(last == NULL)
         first = last = res;
@@ -142,7 +151,7 @@
         last = last->next;
     }
     (void)pthread_mutex_unlock(&arg_mut);
-    pthread_cond_signal(&arg_cond);
+    if (threadpool) pthread_cond_signal(&arg_cond);
     return 0;
 }
 
@@ -155,13 +164,13 @@
     thr_arg *res;
 
     (void)pthread_mutex_lock(&arg_mut);
-    if(first == NULL)
+    if(threadpool && first == NULL)
         (void)pthread_cond_wait(&arg_cond, &arg_mut);
     if((res = first) != NULL)
         if((first = first->next) == NULL)
             last = NULL;
     (void)pthread_mutex_unlock(&arg_mut);
-    if(first != NULL)
+    if(threadpool && first != NULL)
         pthread_cond_signal(&arg_cond);
     return res;
 }
@@ -441,12 +450,14 @@
             /* pause to make sure the service threads were started */
             sleep(1);
 
-            /* create the worker threads */
-            for(i = 0; i < numthreads; i++)
-                if(pthread_create(&thr, &attr, thr_http, NULL)) {
-                    logmsg(LOG_ERR, "create thr_http: %s - aborted", strerror(errno));
-                    exit(1);
-                }
+            if (threadpool) {
+                /* create the worker threads */
+                for(i = 0; i < numthreads; i++)
+                    if(pthread_create(&thr, &attr, thr_http, NULL)) {
+                        logmsg(LOG_ERR, "create thr_http: %s - aborted", strerror(errno));
+                        exit(1);
+                    }
+            }
 
             /* pause to make sure at least some of the worker threads were started */
             sleep(1);
@@ -481,7 +492,7 @@
                                 logmsg(LOG_WARNING, "HTTP accept: %s", strerror(errno));
                             } else if(((struct sockaddr_in *)&clnt_addr)->sin_family == AF_INET
                                    || ((struct sockaddr_in *)&clnt_addr)->sin_family == AF_INET6) {
-                                thr_arg arg;
+                                thr_arg arg, *argp;
 
                                 if(lstn->disabled) {
                                     /*
@@ -503,8 +514,19 @@
                                     arg.from_host.ai_family = AF_INET;
                                 else
                                     arg.from_host.ai_family = AF_INET6;
-                                if(put_thr_arg(&arg))
-                                    close(clnt);
+                                if(threadpool) {
+                                    if(put_thr_arg(&arg))
+                                        close(clnt);
+                                } else {
+                                    if((argp = get_dyn_thr_arg(&arg)) == NULL)
+                                        close(clnt);
+                                    else if(pthread_create(&thr, &attr, thr_http, (void*)argp)) {
+                                        logmsg(LOG_ERR, "create thr_http: %s - aborted", strerror(errno));
+                                        free(argp->from_host.ai_addr);
+                                        free(argp);
+                                        close(clnt);
+                                    }
+                                }
                             } else {
                                 /* may happen on FreeBSD, I am told */
                                 logmsg(LOG_WARNING, "HTTP connection prematurely closed by peer");
--- a/pound.h
+++ b/pound.h
@@ -267,6 +267,8 @@
             *ctrl_name;         /* control socket name */
 
 extern int  numthreads,         /* number of worker threads */
+            threadpool,         /* 1 to use a threadpool (i.e. 2.6 behavior)
+                                   0 to use new thread per request (2.5 behavior) */
             alive_to,           /* check interval for resurrection */
             daemonize,          /* run as daemon */
             log_facility,       /* log facility to use */
